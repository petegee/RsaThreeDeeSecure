using System;
using System.Collections.Generic;
using System.Security.Cryptography.X509Certificates;
using FluentAssertions;
using RsaThreeDeeSecure.Jwe;
using UnitTests.TestData;
using Xunit;

namespace UnitTests
{
    public class JwsHeaderTests
    {
        private JweMessage.JwsHeader ClassUnderTest { get; set; }
        private readonly DateTimeOffset _now = DateTimeOffset.Now;

        protected JwsHeaderTests()
        {
            SystemTime.Set(() => _now);
        }

        public class CreateJwsHeaderForNewMessage : JwsHeaderTests
        {
            private const string CardInfoEncryptedMessage =
                ".ZXlKaGJHY2lPaUpTVTBFdFQwRkZVQ0lzSW1WdVl5STZJa0V4TWpoRFFrTXRTRk15TlRZaUxDSjROV01pT2xzaVRVbEpTbEJFUTBORFExTm5RWGRKUWtGblNVTkZRMFYzUkZGWlNrdHZXa2xvZG1OT1FWRkZURUpSUVhkWWFrVk1UVUZyUjBFeFZVVkNhRTFEVTFWM2VFTjZRVXBDWjA1V1FrRm5UVUZyTlVKTlVYZDNRMmRaUkZaUlVVdEVRVTVUVlRCRmVFWlVRVlJDWjA1V1FrRnpUVVJFVGtWVk1sWnFaRmhLYkVsRVNYVk5SRVZrVFVKelIwRXhWVVZCZDNkVlkyNU9hRXh0YkhWa1IxWjVZbGRzYTJGWFJqQmFVelZxWWpJd2QwaG9ZMDVOVkd0M1RYcE5lRTFFWTNoT2VrVXdWMmhqVGsxcWEzZE5la2swVFVSamVFNTZSVEJYYWtKM1RWRnpkME5SV1VSV1VWRkhSWGRLU2xSRVJWRk5RVFJIUVRGVlJVTkNUVWhXVnpWeVltMDVNMkpxUlZOTlFrRkhRVEZWUlVKNFRVcFRSMVo1Wlcxc2MyRlliR2hOVVhkM1EyZFpSRlpSVVV0RmQwNVRWVEJGZUVWVVFWQkNaMDVXUWtGelZFTkVUa1ZWTWxacVpGaEtiRTFTYjNkSFFWbEVWbEZSUkVSQ1JucGFXRW95V2xoS1pscFhOV3BqYm14M1pFZHNkbUpxUTBOQlUwbDNSRkZaU2t0dldrbG9kbU5PUVZGRlFrSlJRVVJuWjBWUVFVUkRRMEZSYjBOblowVkNRVXRRWW5aNlRYRm1OR3BITVRGbFdHMXdaVkI1V1hFNWNsaEdNU3RRWWxaeFZWUjVORE5RVUhJd2IzVjBNemxYV1cxdlFUQXJjV3BUVG5oaFRWWndPRWtyWVdONGVqUk9WeTlNTUVKMk5VVlJXbG92WmprNE9UWlJNMGt6VjBOcE1HaDJjR05GYjB0YVUzUkNTVTh5UTFaV2JHbFVVbmRpYUd4M1ZWZEJaV2RQY25GMFNubE1RMDlUVGk5cFZuUkdNamtyTUVRd01ra3hlWEJCVVd0dGRGbGhSekJUWVdKSGREaHZibTVpWVVZeVkxRlBNbTltVDFZelJXVmpZV1l5TVdsbFZrd3dVVTV4ZUcxRFIzZERLekUyUXpaS05FYzBRWFYzUm5ocmNsTnNPVEJOUzFSeVdEUTRVRmw0WjJkSE9XSXljMWhLVFUxdFNVeE1Sa3hpUjFvcmQyRXhVMmhXY1VWdk16Rm1iblJGY25odlFWcFVlV2RNTlhBNFkxaElhRU4zVGt4WlFrTjBLMHhRWTB4NWFqRjZiRWhtVmpaMGJWTlBXR05aVVZBMGFIbHFla1p6WldGSVYwOHJhRmxyUkRSamJYcFBZME5CZDBWQlFXRlBRMEptUVhkbloxaHpUVWxKUmtsbldVUldVakJTUWtsSlJrZFVRME5DVWxkRFNVaGtNMlI1TlhOaFZ6VXhaVWhLYTA1RVFYZE1iV2cyWWtkR2FVeHRlR2haYVRWc1lsZE5kVmt5T1hSbmFIaHpZVmMxTVdWSVNtdE9SRUYzVEcxb05tSkhSbWxNYlhob1dXazFiR0pYVFhWWk1qbDBaMmR3YzJGWE5URmxTRXByVGtSQmQyZHBRak5rTTJOMVlrZHNkV1JZYUhsYVJFMTNUVU0xYjJWdGVHaFphVFZ6V1ZkSmRWcFhNV3BNYlU1MllsbEpZMkpIYkhWa1dHaDVXa1JOZDAxRE5XOWxiWGhvV1drMWMxbFhTWFZhVnpGcVRHMU9kbUpaU1V0aVIyeDFaRmhvZVZwRVRYZE5TVWxuWkROa00weHRlSEJpYmxZMFkwaE5NRTFxUVhWaFNIQnpXVmRKZFdKSFJtbE1iVlowV1hrMWFtSXlNa05JUjNod1ltNVdOR05JVFRCTmFrRjFZVWh3YzFsWFNYVmlSMFpwVEcxV2RGbDVOV3BpTWpKRFEyMTRjR0p1VmpSalNFMHdUV3BEUTBsSVpETmtlVFZ6WVZjMU1XVklRbnBPUkVWM1RHMW9ObUpIUm1sTWJYaG9XV2sxYkdKWFRYVlpNamwwWjJoNGMyRlhOVEZsU0VKNlRrUkZkMHh0YURaaVIwWnBURzE0YUZscE5XeGlWMDExV1RJNWRHZG5jSE5oVnpVeFpVaENlazVFUlhkbmFVSXpaRE5qZFdKSGJIVmtXR2g0V1ZSRk1FMUROVzlsYlhob1dXazFjMWxYU1hWYVZ6RnFURzFPZG1KWlNXTmlSMngxWkZob2VGbFVSVEJOUXpWdlpXMTRhRmxwTlhOWlYwbDFXbGN4YWt4dFRuWmlXVWxMWWtkc2RXUllhSGhaVkVVd1RVbEpaMlF6WkROTWJYaHdZbTVXTkdOWFJYaE5la0YxWVVod2MxbFhTWFZpUjBacFRHMVdkRmw1TldwaU1qSkRTRWQ0Y0dKdVZqUmpWMFY0VFhwQmRXRkljSE5aVjBsMVlrZEdhVXh0Vm5SWmVUVnFZakl5UTBOdGVIQmlibFkwWTFkRmVFMTZRME5KU0dRelpIazFjMkZYTlRGbFNFWm9UVlJKZDB4dGFEWmlSMFpwVEcxNGFGbHBOV3hpVjAxMVdUSTVkR2RvZUhOaFZ6VXhaVWhHYUUxVVNYZE1iV2cyWWtkR2FVeHRlR2haYVRWc1lsZE5kVmt5T1hSblozQnpZVmMxTVdWSVJtaE5WRWwzWjJsQ00yUXpZM1ZpUjJ4MVpGaG9lRmxVUlhoTlF6VnZaVzE0YUZscE5YTlpWMGwxV2xjeGFreHRUblppV1VsallrZHNkV1JZYUhoWlZFVjRUVU0xYjJWdGVHaFphVFZ6V1ZkSmRWcFhNV3BNYlU1MllsbEpTMkpIYkhWa1dHaDRXVlJGZUUxSlNXMVpWelZvWWtoc01HRlhUbnBNYlhod1ltNVdOR05JVFRCTlZFRjFZVWh3YzFsWFNYVmlSMFpwVEcxV2RGbDVOV3BpTWpKRFNtMUdkVmxYZURWa1IyeHFZM2sxYzJGWE5URmxTRUo2VGtSSmQweHRhRFppUjBacFRHMTRhRmxwTld4aVYwMTFXVEk1ZEdkcFdtaGliVVp6WlZoU2NGa3pUWFZpUjJ4MVpGaG9lRmxVUlhoTlF6VnZaVzE0YUZscE5YTlpWMGwxV2xjeGFreHRUblppV1VsdFdWYzFhR0pJYkRCaFYwNTZURzE0Y0dKdVZqUmpWMFY0VFdwQmRXRkljSE5aVjBsMVlrZEdhVXh0Vm5SWmVUVnFZakl5UTBwdFJuVlpWM2cxWkVkc2FtTjVOWE5oVnpVeFpVaEdhRTFVVFhkTWJXZzJZa2RHYVV4dGVHaFphVFZzWWxkTmRWa3lPWFJuYVZwb1ltMUdjMlZZVW5CWk0wMTFZa2RzZFdSWWFIaFpWRVV3VFVNMWIyVnRlR2haYVRWeldWZEpkVnBYTVdwTWJVNTJZbGxKVEdKSGJIVmtXR2gzWXpOSmVVMVVRME5JVjNod1ltNVdOR05JVG5sTmFrVjNURzFvTm1KSFJtbE1iWGhvV1drMWJHSlhUWFZaTWpsMFoybEdNMlF6WTNWaVIyeDFaRmhvZDJNelNYbE5WRUYxWVVod2MxbFhTWFZpUjBacFRHMVdkRmw1TldwaU1qSkRRMWQ0TkZsdFJuUlpiVVYzVFc5SlltSklhR2xaVnpGcFdWUkJlVXh0YURaaVIwWnBURzE0YUZscE5XeGlWMDExV1RJNWRHZG9PVE5rTTJOMVlraG9hVmxYTVdsWlZFRjVURzFvTm1KSFJtbE1iWGhvV1drMWJHSlhUWFZaTWpsMFoyaDRNMlF6WTNWaVJ6VjRXVlJGZUV4dGFEWmlSMFpwVEcxNGFGbHBOV3hpVjAxMVdUSTVkR2RuV25OaWJrWm9UVlJIUTBkSGVIVmpWMFY0VFZNMWIyVnRlR2haYVRWeldWZEpkVnBYTVdwTWJVNTJZbGxKWTJRelpETk1iWGgxWTFkRmVVMXBOVzlsYlhob1dXazFjMWxYU1hWYVZ6RnFURzFPZG1KWlNVZGlSelY0V1ZSSmVXZG9hSE5pYmtab1RXcEpkV0ZJY0hOWlYwbDFZa2RHYVV4dFZuUlplVFZxWWpJeVEwTnRlSEJpYmxZMFkxZEZlVTE2UTBOSVIzaHdZbTVXTkdOWFJYbE5la0YxWVVod2MxbFhTWFZpUjBacFRHMVdkRmw1TldwaU1qSkRTVWhrTTJSNU5YTmhWelV4WlVoR2FFMXFUWGRNYldnMllrZEdhVXh0ZUdoWmFUVnNZbGROZFZreU9YUm5aM0J6WVZjMU1XVklSbWhOVkVWNVoyaDRjMkZYTlRGbFNFWm9UVlJGZVV4dGFEWmlSMFpwVEcxNGFGbHBOV3hpVjAxMVdUSTVkR2RwUWpOa00yTjFZa2RzZFdSWWFIaFpWRVY0VFdrMWIyVnRlR2haYVRWeldWZEpkVnBYTVdwTWJVNTJZbGxKVkV0cE5XOWxiWGhvV1drMWMxbFhTWFZhVnpGcVRHMU9kbUpVUVdSQ1owNVdTRkUwUlVablVWVXdPRzlWYUZsRk9HdFFhMjVHVDJ0cWJWcDJVRGxPTjFNMVFUaDNaMXBaUjBFeFZXUkpkMU5DYW1wRFFtazBRVlVyWld0WGVsaGFURTU1V21sYWNsbzNTMll6WjBKTlNpdG5OVzFvWWpaU2RFMUhjM2hEZWtGS1FtZE9Wa0pCV1ZSQmEyeE5UVkZ6ZDBOUldVUldVVkZKUkVGS1QxRlVSVkpOUVRoSFFURlZSVUozZDBsVFIxWjVaVzFXYzJGWFJYaEdla0ZXUW1kT1ZrSkJiMDFFYkVwVVVWTkNSR0l6U25kTVEwSktZbTFOZFUxUmQzZERaMWxFVmxGUlRFUkJUWHBTUmsxNFJsUkJWRUpuVGxaQ1FVMU5SRVJPUlZWNVFsTmlNamt3U1VWb1ZGUlpTVU5GYXpCM1JFRlpSRlpTTUZSQ1FWVjNRWGRGUWk5NlFVNUNaMnR4YUd0cFJ6bDNNRUpCVVhOR1FVRlBRMEZSUlVGa1MzWnBLMFZPTkZsNGIzbENkRnB5UjNWRmVrOHlhRm95V2paT0wzbE1hMnRSTUVFclVsbExTSHBNUW0xTmFIaFFjRGRZTmxaMFptOHJiRFozWkVkcVNWZG1XVmxoYW1OWlpYSkJRblJDSzNwaFRHbEtiR1JhT0hwRU9FMUVjMHQyY25OQlpYcDRaeXRFV21SM2FVdExaRTkwZVRoU2RYTnlNV3hQY1dJelNtZEpUSEYxYlVZcmVDOTZkVnBvZDFreU9WYzBWakpqUlhSVUx6Tm5SR3N5YVdOSE1YWkVVeTg1ZW1WVU1qQjNkR28wYUdvd2VFTnlUVE4xTjNOamFXWnpkMk53ZDI1V1JXcE9jbWdyTTNBeVNHUlRjUzluY0hRcmVtTnRWMjVWUTFOTk56aElNRXRuYW1Rd1RHNVdUVTE2TVM5bmMzZEJWa2RTWTJwcFNtNUZZelZUVlZkeFlsa3dWbm80UTNCdU16ZHJhblYwTVdjMGIzWkhWVXBKZDBWc1VVNXhUVFZMYm5kblNtMHdUM2R6TWpGa1owTk9hMWhOWlRFMWNERnBRblZwTlVFMUwzWjRkbWszU0hGa1pXVkhaMlJPYTBFOVBTSmRmUS5iblFtc3JBd0I0Yy1ueG1VUkxvWHJubUtVNm9QaVFrSkJ5dGtiUTFHWjVpNFB5bDBvcEVtcE0xRUZsY1VZVG56eGNDdWdrRjFoSWJCQmIyc0lVYWl1QkVaM28tNkFNVzFJNlRka1NwVGsxeGlCMWU0ek9oSkxUaVdTY2xCSFBYTlpZNDJlcUZ1SEFBTm9NUHRiOEpRbVd5RExkYmM1VTZRSTNIcFhiOE5ZUzlYXy1CVVQ0LWF4dlliV1huRkthTnlORkdFM1J4bGRCb3hGWEU2cXRNVXdYN25YVFR6alQzLXFtTGFFTzBfbWlzUldRbm02NElXdG9NWkhPNUxmQmUxLXJMQmlyT0N6VzU4VEpuX3BNTU5nM0Nla3J4cXZrRkUyNGo5TW5zZ1lpcHNnVjFneERfS09HNzZBWUVjaFV1U0g5anZzcWNlOUFROWFBOXdKelNrYWcuQUc2Y3FEVWg1RWh5WTh5VFRWQ05aQS5pS0pSNkVmbHNnNWkyT0EtZHJHMlJwTUtTd1RkZlIzaXREMUM3bVBiOTJXX1pKX2tEM2xZU1g0Rk9sMWNzQ1BndTV0SG44WFplalRqMm9VNC1rOGJTTkN4bkMySEktNEdWazhoNDdiWGVLMGw5NHFDV21aX3VLT0ZTcDRoRU93cVhjMGY4aVZQNHRRTmY0MUFOY0FRcWtIUVFIeklsVDJLTzFGQ3N5dzVVcTdYUjEtMXV2WUh5MWkwUVJFX3I5bzV0bUU5VGpaMDJBODVnSW53b2ZiSWdBWnBZcndfc3RGN1FCM2dEUHNCSDZHQnpTXzNfZW50MzV6NDJVQk9MMUNOOGFwNnRiaHYwN1dpUlAxdzEtakZrR2tudER1d2NnM1Q0T3V1dFl3X3d2WE1QOFlHNGF0dTNKM0w3RzVWYXVMRWJLT05hNUI3NWNfY0VXWFloaERHUGpLdkY5MDNxenZtcmhUMy1JVTFVeHZmU2VnMVRxQlNLNlBqdVlkN1Iyb3lUVGZKaFRrQVhTeGxlRjQ4NVNrZDBDVGRqMHAyOVEyQmpFQUR6S3FlSkg5SWdBM25qQ2FyOUREX1ZNY2FrVHZNTW1wOEwzN3VlTHFVMk8xSFFqY1djQ2wtWDlWcVI2ZW04dkJyVlhta0sxNHVydHhDR3hyTWNGY3RSMEI3cFhMd054eV9senVzM3JUQ3RhMWYydU4yRC1URDZYZ1FGXzlmcVE2ekVqbHdxOFUuY1V6RFBmT3lVUDZ5T3dwejhONXpzQQ.Mw5cirD9IF0I_O878R7zzDNeaQmiPqoYco5nojaP-DxYWt7JkfNPa8SUmYuP1wyDwCEQhTli-DxywUxTLV0VtzXSEW8NMQk9iqwrRYDW5neAjRN5LDy7X-4pqZo--kQNw91GuAahhCEtkK_wcG7jrEafgrwLc6MmxHidmHDIo7l_JC4YzRSJ6ikKLGAmblXFIAqquyxCHfsIAr55K8_mOx-Q2KLAo73y2SEh_n3vRZU5XEWXcPOpDo2gYPyct2UAb005GB9D5qzNlFDgKelW8WrVHqY1IlWVzwUgLGytfP-Sdwvc67m6_RqUqIqj_z2gx7noENx7iTbrGLmLJ8ZDlw";

            private readonly string _jweHeaderAsB64 = CardInfoEncryptedMessage.Split(".")[0];

            [Fact]
            public void ShouldCreateTheHeaderWithoutError()
            {
                ClassUnderTest = JweMessage.JwsHeader.CreateJweHeaderFromEncryptedHeader(_jweHeaderAsB64);
                
                ClassUnderTest.Should().NotBeNull();
            }
            
            [Fact]
            public void ShouldCreateTheHeaderWithCorrectStaticData()
            {
                ClassUnderTest = JweMessage.JwsHeader.CreateJweHeaderFromEncryptedHeader(_jweHeaderAsB64);

                ClassUnderTest.Alg.Should().Be("RS256");
                ClassUnderTest.Crit.Should().Contain("exp");
            }
            
            [Fact]
            public void ShouldCreateTheHeaderWithSixtySecondExpiryDate()
            {
                ClassUnderTest = JweMessage.JwsHeader.CreateJweHeaderFromEncryptedHeader(_jweHeaderAsB64);

                ClassUnderTest.Expiry.Should().Be(1559193717);
            }
            
            [Fact]
            public void ShouldCreateTheHeaderWithSigningCertsInOrder()
            {
                ClassUnderTest = JweMessage.JwsHeader.CreateJweHeaderFromEncryptedHeader(_jweHeaderAsB64);

                ClassUnderTest.Certificates
                    .Should()
                    .ContainInOrder(
                        new List<X509Certificate2>
                        {
                            RsaSigningCert.GetX509Certificate2(),
                            RsaIntermediateCert.GetX509Certificate2(),
                            RsaRootCert.GetX509Certificate2()
                        });
            }
            
            [Fact]
            public void ShouldSetTheCorrectSigningPublicCert()
            {
                ClassUnderTest = JweMessage.JwsHeader.CreateJweHeaderFromEncryptedHeader(_jweHeaderAsB64);

                ClassUnderTest.SigningPublicCert
                    .Should()
                    .Be(RsaSigningCert.GetX509Certificate2());
            }
        }

        public class HasExpired : JwsHeaderTests
        {        
            public HasExpired()
            {
                ClassUnderTest = new JweMessage.JwsHeader();
            }

            [Fact]
            public void NotExpiredWhenExpiryIsSixtySecondsInTheFuture()
            {
                MessageExpiresInSecondsFromNow(60);
                    
                ClassUnderTest.HasExpired().Should().BeFalse();
            }
                
            [Fact]
            public void NotExpiredWhenExpiryOneSecondInTheFuture()
            {
                MessageExpiresInSecondsFromNow(1);
                    
                ClassUnderTest.HasExpired().Should().BeFalse();
            }
                
            [Fact]
            public void ExpiredWhenExpiryZeroSecondsInTheFuture()
            {
                MessageExpiresInSecondsFromNow(0);
                    
                ClassUnderTest.HasExpired().Should().BeTrue();
            }
                
            [Fact]
            public void ExpiredWhenExpiryIsInThePast()
            {
                MessageExpiresInSecondsFromNow(-1);
                    
                ClassUnderTest.HasExpired().Should().BeTrue();
            }
            
            private long MessageExpiresInSecondsFromNow(long seconds)
            {
                return ClassUnderTest.Expiry = _now.AddSeconds(seconds).ToUnixTimeSeconds();
            }
        }

        public class VerifyCertChain : JwsHeaderTests
        {
            private const string CardInfoEncryptedMessage =
                ".ZXlKaGJHY2lPaUpTVTBFdFQwRkZVQ0lzSW1WdVl5STZJa0V4TWpoRFFrTXRTRk15TlRZaUxDSjROV01pT2xzaVRVbEpTbEJFUTBORFExTm5RWGRKUWtGblNVTkZRMFYzUkZGWlNrdHZXa2xvZG1OT1FWRkZURUpSUVhkWWFrVk1UVUZyUjBFeFZVVkNhRTFEVTFWM2VFTjZRVXBDWjA1V1FrRm5UVUZyTlVKTlVYZDNRMmRaUkZaUlVVdEVRVTVUVlRCRmVFWlVRVlJDWjA1V1FrRnpUVVJFVGtWVk1sWnFaRmhLYkVsRVNYVk5SRVZrVFVKelIwRXhWVVZCZDNkVlkyNU9hRXh0YkhWa1IxWjVZbGRzYTJGWFJqQmFVelZxWWpJd2QwaG9ZMDVOVkd0M1RYcE5lRTFFWTNoT2VrVXdWMmhqVGsxcWEzZE5la2swVFVSamVFNTZSVEJYYWtKM1RWRnpkME5SV1VSV1VWRkhSWGRLU2xSRVJWRk5RVFJIUVRGVlJVTkNUVWhXVnpWeVltMDVNMkpxUlZOTlFrRkhRVEZWUlVKNFRVcFRSMVo1Wlcxc2MyRlliR2hOVVhkM1EyZFpSRlpSVVV0RmQwNVRWVEJGZUVWVVFWQkNaMDVXUWtGelZFTkVUa1ZWTWxacVpGaEtiRTFTYjNkSFFWbEVWbEZSUkVSQ1JucGFXRW95V2xoS1pscFhOV3BqYm14M1pFZHNkbUpxUTBOQlUwbDNSRkZaU2t0dldrbG9kbU5PUVZGRlFrSlJRVVJuWjBWUVFVUkRRMEZSYjBOblowVkNRVXRRWW5aNlRYRm1OR3BITVRGbFdHMXdaVkI1V1hFNWNsaEdNU3RRWWxaeFZWUjVORE5RVUhJd2IzVjBNemxYV1cxdlFUQXJjV3BUVG5oaFRWWndPRWtyWVdONGVqUk9WeTlNTUVKMk5VVlJXbG92WmprNE9UWlJNMGt6VjBOcE1HaDJjR05GYjB0YVUzUkNTVTh5UTFaV2JHbFVVbmRpYUd4M1ZWZEJaV2RQY25GMFNubE1RMDlUVGk5cFZuUkdNamtyTUVRd01ra3hlWEJCVVd0dGRGbGhSekJUWVdKSGREaHZibTVpWVVZeVkxRlBNbTltVDFZelJXVmpZV1l5TVdsbFZrd3dVVTV4ZUcxRFIzZERLekUyUXpaS05FYzBRWFYzUm5ocmNsTnNPVEJOUzFSeVdEUTRVRmw0WjJkSE9XSXljMWhLVFUxdFNVeE1Sa3hpUjFvcmQyRXhVMmhXY1VWdk16Rm1iblJGY25odlFWcFVlV2RNTlhBNFkxaElhRU4zVGt4WlFrTjBLMHhRWTB4NWFqRjZiRWhtVmpaMGJWTlBXR05aVVZBMGFIbHFla1p6WldGSVYwOHJhRmxyUkRSamJYcFBZME5CZDBWQlFXRlBRMEptUVhkbloxaHpUVWxKUmtsbldVUldVakJTUWtsSlJrZFVRME5DVWxkRFNVaGtNMlI1TlhOaFZ6VXhaVWhLYTA1RVFYZE1iV2cyWWtkR2FVeHRlR2haYVRWc1lsZE5kVmt5T1hSbmFIaHpZVmMxTVdWSVNtdE9SRUYzVEcxb05tSkhSbWxNYlhob1dXazFiR0pYVFhWWk1qbDBaMmR3YzJGWE5URmxTRXByVGtSQmQyZHBRak5rTTJOMVlrZHNkV1JZYUhsYVJFMTNUVU0xYjJWdGVHaFphVFZ6V1ZkSmRWcFhNV3BNYlU1MllsbEpZMkpIYkhWa1dHaDVXa1JOZDAxRE5XOWxiWGhvV1drMWMxbFhTWFZhVnpGcVRHMU9kbUpaU1V0aVIyeDFaRmhvZVZwRVRYZE5TVWxuWkROa00weHRlSEJpYmxZMFkwaE5NRTFxUVhWaFNIQnpXVmRKZFdKSFJtbE1iVlowV1hrMWFtSXlNa05JUjNod1ltNVdOR05JVFRCTmFrRjFZVWh3YzFsWFNYVmlSMFpwVEcxV2RGbDVOV3BpTWpKRFEyMTRjR0p1VmpSalNFMHdUV3BEUTBsSVpETmtlVFZ6WVZjMU1XVklRbnBPUkVWM1RHMW9ObUpIUm1sTWJYaG9XV2sxYkdKWFRYVlpNamwwWjJoNGMyRlhOVEZsU0VKNlRrUkZkMHh0YURaaVIwWnBURzE0YUZscE5XeGlWMDExV1RJNWRHZG5jSE5oVnpVeFpVaENlazVFUlhkbmFVSXpaRE5qZFdKSGJIVmtXR2g0V1ZSRk1FMUROVzlsYlhob1dXazFjMWxYU1hWYVZ6RnFURzFPZG1KWlNXTmlSMngxWkZob2VGbFVSVEJOUXpWdlpXMTRhRmxwTlhOWlYwbDFXbGN4YWt4dFRuWmlXVWxMWWtkc2RXUllhSGhaVkVVd1RVbEpaMlF6WkROTWJYaHdZbTVXTkdOWFJYaE5la0YxWVVod2MxbFhTWFZpUjBacFRHMVdkRmw1TldwaU1qSkRTRWQ0Y0dKdVZqUmpWMFY0VFhwQmRXRkljSE5aVjBsMVlrZEdhVXh0Vm5SWmVUVnFZakl5UTBOdGVIQmlibFkwWTFkRmVFMTZRME5KU0dRelpIazFjMkZYTlRGbFNFWm9UVlJKZDB4dGFEWmlSMFpwVEcxNGFGbHBOV3hpVjAxMVdUSTVkR2RvZUhOaFZ6VXhaVWhHYUUxVVNYZE1iV2cyWWtkR2FVeHRlR2haYVRWc1lsZE5kVmt5T1hSblozQnpZVmMxTVdWSVJtaE5WRWwzWjJsQ00yUXpZM1ZpUjJ4MVpGaG9lRmxVUlhoTlF6VnZaVzE0YUZscE5YTlpWMGwxV2xjeGFreHRUblppV1VsallrZHNkV1JZYUhoWlZFVjRUVU0xYjJWdGVHaFphVFZ6V1ZkSmRWcFhNV3BNYlU1MllsbEpTMkpIYkhWa1dHaDRXVlJGZUUxSlNXMVpWelZvWWtoc01HRlhUbnBNYlhod1ltNVdOR05JVFRCTlZFRjFZVWh3YzFsWFNYVmlSMFpwVEcxV2RGbDVOV3BpTWpKRFNtMUdkVmxYZURWa1IyeHFZM2sxYzJGWE5URmxTRUo2VGtSSmQweHRhRFppUjBacFRHMTRhRmxwTld4aVYwMTFXVEk1ZEdkcFdtaGliVVp6WlZoU2NGa3pUWFZpUjJ4MVpGaG9lRmxVUlhoTlF6VnZaVzE0YUZscE5YTlpWMGwxV2xjeGFreHRUblppV1VsdFdWYzFhR0pJYkRCaFYwNTZURzE0Y0dKdVZqUmpWMFY0VFdwQmRXRkljSE5aVjBsMVlrZEdhVXh0Vm5SWmVUVnFZakl5UTBwdFJuVlpWM2cxWkVkc2FtTjVOWE5oVnpVeFpVaEdhRTFVVFhkTWJXZzJZa2RHYVV4dGVHaFphVFZzWWxkTmRWa3lPWFJuYVZwb1ltMUdjMlZZVW5CWk0wMTFZa2RzZFdSWWFIaFpWRVV3VFVNMWIyVnRlR2haYVRWeldWZEpkVnBYTVdwTWJVNTJZbGxKVEdKSGJIVmtXR2gzWXpOSmVVMVVRME5JVjNod1ltNVdOR05JVG5sTmFrVjNURzFvTm1KSFJtbE1iWGhvV1drMWJHSlhUWFZaTWpsMFoybEdNMlF6WTNWaVIyeDFaRmhvZDJNelNYbE5WRUYxWVVod2MxbFhTWFZpUjBacFRHMVdkRmw1TldwaU1qSkRRMWQ0TkZsdFJuUlpiVVYzVFc5SlltSklhR2xaVnpGcFdWUkJlVXh0YURaaVIwWnBURzE0YUZscE5XeGlWMDExV1RJNWRHZG9PVE5rTTJOMVlraG9hVmxYTVdsWlZFRjVURzFvTm1KSFJtbE1iWGhvV1drMWJHSlhUWFZaTWpsMFoyaDRNMlF6WTNWaVJ6VjRXVlJGZUV4dGFEWmlSMFpwVEcxNGFGbHBOV3hpVjAxMVdUSTVkR2RuV25OaWJrWm9UVlJIUTBkSGVIVmpWMFY0VFZNMWIyVnRlR2haYVRWeldWZEpkVnBYTVdwTWJVNTJZbGxKWTJRelpETk1iWGgxWTFkRmVVMXBOVzlsYlhob1dXazFjMWxYU1hWYVZ6RnFURzFPZG1KWlNVZGlSelY0V1ZSSmVXZG9hSE5pYmtab1RXcEpkV0ZJY0hOWlYwbDFZa2RHYVV4dFZuUlplVFZxWWpJeVEwTnRlSEJpYmxZMFkxZEZlVTE2UTBOSVIzaHdZbTVXTkdOWFJYbE5la0YxWVVod2MxbFhTWFZpUjBacFRHMVdkRmw1TldwaU1qSkRTVWhrTTJSNU5YTmhWelV4WlVoR2FFMXFUWGRNYldnMllrZEdhVXh0ZUdoWmFUVnNZbGROZFZreU9YUm5aM0J6WVZjMU1XVklSbWhOVkVWNVoyaDRjMkZYTlRGbFNFWm9UVlJGZVV4dGFEWmlSMFpwVEcxNGFGbHBOV3hpVjAxMVdUSTVkR2RwUWpOa00yTjFZa2RzZFdSWWFIaFpWRVY0VFdrMWIyVnRlR2haYVRWeldWZEpkVnBYTVdwTWJVNTJZbGxKVkV0cE5XOWxiWGhvV1drMWMxbFhTWFZhVnpGcVRHMU9kbUpVUVdSQ1owNVdTRkUwUlVablVWVXdPRzlWYUZsRk9HdFFhMjVHVDJ0cWJWcDJVRGxPTjFNMVFUaDNaMXBaUjBFeFZXUkpkMU5DYW1wRFFtazBRVlVyWld0WGVsaGFURTU1V21sYWNsbzNTMll6WjBKTlNpdG5OVzFvWWpaU2RFMUhjM2hEZWtGS1FtZE9Wa0pCV1ZSQmEyeE5UVkZ6ZDBOUldVUldVVkZKUkVGS1QxRlVSVkpOUVRoSFFURlZSVUozZDBsVFIxWjVaVzFXYzJGWFJYaEdla0ZXUW1kT1ZrSkJiMDFFYkVwVVVWTkNSR0l6U25kTVEwSktZbTFOZFUxUmQzZERaMWxFVmxGUlRFUkJUWHBTUmsxNFJsUkJWRUpuVGxaQ1FVMU5SRVJPUlZWNVFsTmlNamt3U1VWb1ZGUlpTVU5GYXpCM1JFRlpSRlpTTUZSQ1FWVjNRWGRGUWk5NlFVNUNaMnR4YUd0cFJ6bDNNRUpCVVhOR1FVRlBRMEZSUlVGa1MzWnBLMFZPTkZsNGIzbENkRnB5UjNWRmVrOHlhRm95V2paT0wzbE1hMnRSTUVFclVsbExTSHBNUW0xTmFIaFFjRGRZTmxaMFptOHJiRFozWkVkcVNWZG1XVmxoYW1OWlpYSkJRblJDSzNwaFRHbEtiR1JhT0hwRU9FMUVjMHQyY25OQlpYcDRaeXRFV21SM2FVdExaRTkwZVRoU2RYTnlNV3hQY1dJelNtZEpUSEYxYlVZcmVDOTZkVnBvZDFreU9WYzBWakpqUlhSVUx6Tm5SR3N5YVdOSE1YWkVVeTg1ZW1WVU1qQjNkR28wYUdvd2VFTnlUVE4xTjNOamFXWnpkMk53ZDI1V1JXcE9jbWdyTTNBeVNHUlRjUzluY0hRcmVtTnRWMjVWUTFOTk56aElNRXRuYW1Rd1RHNVdUVTE2TVM5bmMzZEJWa2RTWTJwcFNtNUZZelZUVlZkeFlsa3dWbm80UTNCdU16ZHJhblYwTVdjMGIzWkhWVXBKZDBWc1VVNXhUVFZMYm5kblNtMHdUM2R6TWpGa1owTk9hMWhOWlRFMWNERnBRblZwTlVFMUwzWjRkbWszU0hGa1pXVkhaMlJPYTBFOVBTSmRmUS5iblFtc3JBd0I0Yy1ueG1VUkxvWHJubUtVNm9QaVFrSkJ5dGtiUTFHWjVpNFB5bDBvcEVtcE0xRUZsY1VZVG56eGNDdWdrRjFoSWJCQmIyc0lVYWl1QkVaM28tNkFNVzFJNlRka1NwVGsxeGlCMWU0ek9oSkxUaVdTY2xCSFBYTlpZNDJlcUZ1SEFBTm9NUHRiOEpRbVd5RExkYmM1VTZRSTNIcFhiOE5ZUzlYXy1CVVQ0LWF4dlliV1huRkthTnlORkdFM1J4bGRCb3hGWEU2cXRNVXdYN25YVFR6alQzLXFtTGFFTzBfbWlzUldRbm02NElXdG9NWkhPNUxmQmUxLXJMQmlyT0N6VzU4VEpuX3BNTU5nM0Nla3J4cXZrRkUyNGo5TW5zZ1lpcHNnVjFneERfS09HNzZBWUVjaFV1U0g5anZzcWNlOUFROWFBOXdKelNrYWcuQUc2Y3FEVWg1RWh5WTh5VFRWQ05aQS5pS0pSNkVmbHNnNWkyT0EtZHJHMlJwTUtTd1RkZlIzaXREMUM3bVBiOTJXX1pKX2tEM2xZU1g0Rk9sMWNzQ1BndTV0SG44WFplalRqMm9VNC1rOGJTTkN4bkMySEktNEdWazhoNDdiWGVLMGw5NHFDV21aX3VLT0ZTcDRoRU93cVhjMGY4aVZQNHRRTmY0MUFOY0FRcWtIUVFIeklsVDJLTzFGQ3N5dzVVcTdYUjEtMXV2WUh5MWkwUVJFX3I5bzV0bUU5VGpaMDJBODVnSW53b2ZiSWdBWnBZcndfc3RGN1FCM2dEUHNCSDZHQnpTXzNfZW50MzV6NDJVQk9MMUNOOGFwNnRiaHYwN1dpUlAxdzEtakZrR2tudER1d2NnM1Q0T3V1dFl3X3d2WE1QOFlHNGF0dTNKM0w3RzVWYXVMRWJLT05hNUI3NWNfY0VXWFloaERHUGpLdkY5MDNxenZtcmhUMy1JVTFVeHZmU2VnMVRxQlNLNlBqdVlkN1Iyb3lUVGZKaFRrQVhTeGxlRjQ4NVNrZDBDVGRqMHAyOVEyQmpFQUR6S3FlSkg5SWdBM25qQ2FyOUREX1ZNY2FrVHZNTW1wOEwzN3VlTHFVMk8xSFFqY1djQ2wtWDlWcVI2ZW04dkJyVlhta0sxNHVydHhDR3hyTWNGY3RSMEI3cFhMd054eV9senVzM3JUQ3RhMWYydU4yRC1URDZYZ1FGXzlmcVE2ekVqbHdxOFUuY1V6RFBmT3lVUDZ5T3dwejhONXpzQQ.Mw5cirD9IF0I_O878R7zzDNeaQmiPqoYco5nojaP-DxYWt7JkfNPa8SUmYuP1wyDwCEQhTli-DxywUxTLV0VtzXSEW8NMQk9iqwrRYDW5neAjRN5LDy7X-4pqZo--kQNw91GuAahhCEtkK_wcG7jrEafgrwLc6MmxHidmHDIo7l_JC4YzRSJ6ikKLGAmblXFIAqquyxCHfsIAr55K8_mOx-Q2KLAo73y2SEh_n3vRZU5XEWXcPOpDo2gYPyct2UAb005GB9D5qzNlFDgKelW8WrVHqY1IlWVzwUgLGytfP-Sdwvc67m6_RqUqIqj_z2gx7noENx7iTbrGLmLJ8ZDlw";

            private readonly string _jweHeaderAsB64 = CardInfoEncryptedMessage.Split(".")[0];


            [Fact]
            public void NotExpiredWhenExpiryIsSixtySecondsInTheFuture()
            {
                ClassUnderTest = JweMessage.JwsHeader.CreateJweHeaderFromEncryptedHeader(_jweHeaderAsB64);

                var verified = ClassUnderTest.VerifyCertChain(new DevJweCryptoPolicy());

                verified.Should().BeTrue();
            }
        }

    }
}